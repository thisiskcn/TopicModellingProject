# -*- coding: utf-8 -*-
"""TopicModellingProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DYpGf_99nKz2BMwSf7z8TbaVdHtbhSjH
"""

# This is a topic modelling application that takes a textual dataset, cleans it,
# extracts topic models from it and then generates a visualization depicting the
# coherence of each model and how they fare against each other.

!pip install pyLDAvis

# Commented out IPython magic to ensure Python compatibility.
# Importing libraries to be used by the application
import matplotlib.pyplot as plt
import gensim
import numpy as np
import spacy

from gensim.models import CoherenceModel, LdaModel, LsiModel, HdpModel
from gensim.models.wrappers import LdaMallet
from gensim.corpora import Dictionary
import pyLDAvis.gensim

import os, re, operator, warnings
warnings.filterwarnings('ignore')  
# %matplotlib inline

# Cleaning the dataset
def clean(text):
    return str(''.join([i if ord(i) < 128 else ' ' for i in text]))

# Using the Lee Corpus dataset
test_data_dir = '{}'.format(os.sep).join([gensim.__path__[0], 'test', 'test_data'])
lee_train_file = test_data_dir + os.sep + 'lee_background.cor'
text = open(lee_train_file).read()

# Importing spaCy for large-scale data extraction
import spacy
nlp = spacy.load("en")

# Adding stop words
my_stop_words = [u'say', u'\'s', u'Mr', u'be', u'said', u'says', u'saying']
for stopword in my_stop_words:
    lexeme = nlp.vocab[stopword]
    lexeme.is_stop = True
texts, article, skl_texts = [], [], []
for w in doc:
    if w.text != '\n' and not w.is_stop and not w.is_punct and not w.like_num:
        
        # Adding the lemmatized version of the word
        article.append(w.lemma_)
    
    # New line represents start of a new document
    if w.text == '\n':
        skl_texts.append(' '.join(article))
        texts.append(article)
        article = []

doc = nlp(clean(text))

doc

# Adding bigram to catch words like New York or Taj Mahal as one word
bigram = gensim.models.Phrases(texts)

texts = [bigram[line] for line in texts]

# Displaying data to show bigrams were created
texts[0][0:10]

dictionary = Dictionary(texts)
corpus = [dictionary.doc2bow(text) for text in texts]

corpus[7][0:10]

# Generating topics under the LSI Model
lsimodel = LsiModel(corpus=corpus, num_topics=10, id2word=dictionary)

# Showing the 10 topics
lsimodel.show_topics(num_topics=10)

# Generating topics under the HDP Model
hdpmodel = HdpModel(corpus=corpus, id2word=dictionary)

# Showing all topics since the model figures out a number by itself
hdpmodel.show_topics()

# Generating topics under the LDA Model
ldamodel = LdaModel(corpus=corpus, num_topics=10, id2word=dictionary)

# Showing the 10 topics
ldamodel.show_topics()

# Interactive Visualization of topics under LDA model
pyLDAvis.enable_notebook()
pyLDAvis.gensim.prepare(ldamodel, corpus, dictionary)

# Interactive Visualization of topics under HDP model
pyLDAvis.enable_notebook()
pyLDAvis.gensim.prepare(hdpmodel, corpus, dictionary)

# Finding coherence of the models
lsitopics = [[word for word, prob in topic] for topicid, topic in lsimodel.show_topics(formatted=False)]

hdptopics = [[word for word, prob in topic] for topicid, topic in hdpmodel.show_topics(formatted=False)]

ldatopics = [[word for word, prob in topic] for topicid, topic in ldamodel.show_topics(formatted=False)]

lsi_coherence = CoherenceModel(topics=lsitopics[:10], texts=texts, dictionary=dictionary, window_size=10).get_coherence()

hdp_coherence = CoherenceModel(topics=hdptopics[:10], texts=texts, dictionary=dictionary, window_size=10).get_coherence()

lda_coherence = CoherenceModel(topics=ldatopics, texts=texts, dictionary=dictionary, window_size=10).get_coherence()

# Plotting a bar graph
def evaluate_bar_graph(coherences, indices):

    # coherences: list of coherence values
    # indices: Indices to be used to mark bars
    
    assert len(coherences) == len(indices)
    n = len(coherences)
    x = np.arange(n)
    plt.bar(x, coherences, width=0.2, tick_label=indices, align='center')
    plt.xlabel('Topic Models')
    plt.ylabel('Coherence Values')

# Displaying the bar graph
evaluate_bar_graph([lsi_coherence, hdp_coherence, lda_coherence],
                   ['LSI', 'HDP', 'LDA'])